\input texinfo    @c -*- texinfo -*-
@c %**start of header
@setfilename kubed.info
@settitle Kubed: Kubernetes, Emacs, done!
@documentencoding UTF-8
@documentlanguage en
@set MAINTAINERSITE @uref{https://eshelyaron.com,maintainer webpage}
@set MAINTAINER Eshel Yaron
@set MAINTAINEREMAIL @email{me@eshelyaron.com}
@set MAINTAINERCONTACT @uref{mailto:me@eshelyaron.com,contact the maintainer}
@c %**end of header

@copying
This manual is for Kubed 0.1.0, a rich Emacs interface for Kubernetes.

Copyright @copyright{} 2024 Eshel Yaron.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
@end quotation
@end copying

@dircategory Emacs
@direntry
* Kubed: (kubed).       Kubernetes, Emacs, done!
@end direntry

@finalout
@titlepage
@title Kubed: Kubernetes, Emacs, done!
@author Eshel Yaron (@email{me@@eshelyaron.com})
@end titlepage

@contents

@ifnottex
@node Top
@top Kubed: Kubernetes, Emacs, done!

This manual is for Kubed 0.1.0, a rich Emacs interface for Kubernetes.

@end ifnottex

@menu
* Overview::                    Introduction to Kubed
* Getting Started::             First steps with Kubed
* Usage::                       Using Kubed to interact with Kubernetes
* Extending Kubed::             Adding support for your custom resources
* Contributing::                Get involved in Kubed development
* Indices::
@end menu

@node Overview
@chapter Overview

@cindex Kubed
@cindex kubed
Kubed is a rich Kubernetes interface within Emacs.  It helps you work
with your Kubernetes clusters and deployments with the full power of
@command{kubectl}, and with the comfort and confidence of an intuitive
interactive interface.

You can use Kubed to:

@itemize
@item
Browse and manage Kubernetes workloads
@item
Connect to pods and edit files or execute commands
@item
Create new resources, edit and delete them
@item
Get help about various Kubernetes objects
@item
@dots{}
@end itemize

These features and others are documented in the rest of this manual,
along with many options that Kubed provides for you to customize its
behavior.

@node Getting Started
@chapter Getting Started

@cindex installation
Use your favorite Emacs package manager to install Kubed from Git.  You
can clone the Kubed Git repository from any of the following locations:

@itemize
@item
@url{https://git.sr.ht/~eshel/kubed}
@item
@url{https://github.com/eshelyaron/kubed.git}
@item
@url{git://git.eshelyaron.com/kubed.git}
@end itemize

@cindex requirements
To get started with Kubed, all you need is @command{kubectl} and Emacs.

Kubed tries to find @command{kubectl} in the directories listed in the
Emacs variable @code{exec-path}.  When Emacs is started from a shell, it
initializes @code{exec-path} from the shell's @env{PATH} environment
variable which normally includes the location of @command{kubectl} in
common @command{kubectl} installations.  If Emacs doesn't find the
@command{kubectl} executable via @code{exec-path}, you can tell Kubed
where to find it by customizing @code{kubed-kubectl-program}.

@defopt kubed-kubectl-program
Name of @command{kubectl} executable file to use.
@end defopt

@node Usage
@chapter Usage

Kubed comes with a large number of Emacs command for interacting with
Kubernetes.  Some commands perform one action on one resource, while
others show you a menu with many resources and let you interact with any
number of them.  Some commands are specific to one type of resources,
while others act on resources of any type.  There are different ways to
use Kubed, depending on your use case.

The two most important entry points for Kubed are
@code{kubed-prefix-map} and @code{kubed-transient}:

@cindex global prefix keymap
@cindex prefix keymap, global commands
@cindex keymap, for global commands
@defvr Keymap kubed-prefix-map
@anchor{Definition of kubed-prefix-map}
Keymap with bindings for many useful Kubed commands.
@end defvr

The prefix keymap @code{kubed-prefix-map} gives you quick access to the
main Kubed commands.  You may want to bind it to a convenient key in
your global keymap, for example:

@lisp
(keymap-global-set "C-c k" 'kubed-prefix-map)
@end lisp

With this binding in place, you can create a new Kubernetes resource
with @kbd{C-c k +} and attach to a running pod with @kbd{C-c k p a}.
The @kbd{C-c k} binding is just a suggestion of course, feel free to
pick any key sequence you like.

You can also access all of the commands in @code{kubed-prefix-map} via
the menu-bar @samp{Kubernetes} menu---to add this menu to your
menu-bar, enable the global minor mode @code{kubed-menu-bar-mode}:

@deffn {Minor Mode} kubed-menu-bar-mode
Add @samp{Kubernetes} menu to your menu bar.
@end deffn

The other important entry point that Kubed provides for exploring and
performing different Kubernetes operations is @code{kubed-transient}:

@deffn Command kubed-transient
Open the main Kubed transient menu.
@end deffn

This command pops up the Kubed transient menu, which gives you
interactive guidance for invoking Kubed commands.
@xref{Top,,,transient}.

The following sections describe in detail the various Kubed commands.

@menu
* Common Commands::
* Browsing Resources::
* Transient Menus::
@end menu

@node Common Commands
@section Common Commands

@node Browsing Resources
@section Browsing Resources

Kubed gives you an interactive list of resources for each type, that
you access with the @code{kubed-list-@var{resource}s} commands, such
as @code{kubed-list-pods} which shows you the list of Kubernetes pods
in buffer @file{*kubed-pods*}.

These commands are bound to @kbd{l} in Kubed's type-specific prefix
keymaps, most of which are accessible via the global
@code{kubed-prefix-map} by default (@pxref{Definition of
kubed-prefix-map}).  So if you've bound @code{kubed-prefix-map} to
@kbd{C-c k}, you can pop up the pods list with @kbd{C-c k p l}, the
deployments list with @kbd{C-c k d l}, the namespaces list with
@kbd{C-c k N l}, etc.

Each resource type has its own major mode for list buffers with
type-specific commands and operations, but they are all also derived
from a shared parent mode.  The @file{*kubed-pods*} buffer uses the
@code{kubed-pods-mode} (@samp{Kubernetes Pods}) major mode, the list
of Kubernetes deployments in buffer @file{*kubed-deployments*} uses
@code{kubed-deployments-mode}, and so on.

The common parent major mode is @code{kubed-list-mode}:

@deffn {Major Mode} kubed-list-mode
Major mode for listing generic Kubernetes resources.
@end deffn

This provides several commands for all type-specific derived modes:

@table @kbd
@kindex /
@findex kubed-list-set-filter
@item /
Filter the current list of resources (@code{kubed-list-set-filter}).
@xref{List Filter}.
@kindex d
@findex kubed-list-mark-for-deletion
@item d
Mark the resource at point for deletion
(@code{kubed-list-mark-for-deletion}).  Resources marked for deletion
have a @samp{D} in the beginning of their line.
@kindex u
@findex kubed-list-unmark
@item u
Unmark from resource at point (@code{kubed-list-unmark}).
@kindex A
@findex kubed-all-namespaces-mode
@item A
Toggle @code{kubed-all-namespaces-mode}.  When enabled, resource lists
for namespaced resource types show resources from all namespaces, not
just the current namespace.
@kindex n
@findex next-line
@item n
Move point to the next line (@code{next-line}).
@kindex p
@findex previous-line
@item p
Move point to the previous line (@code{previous-line}).
@kindex @key{TAB}
@findex kubed-list-next-column
@item @key{TAB}
Move point to the next column.  If point is already at the last
column, move to the first column of the next line instead
(@code{kubed-list-next-column}).
@kindex S-@key{TAB}
@findex kubed-list-previous-column
@item S-@key{TAB}
Move point to the previous column.  If point is already at the first
column, move to the last column of the previous line instead
(@code{kubed-list-previous-column}).
@kindex S
@findex tabulated-list-sort
@item S
Sort lines by the column at point (@code{tabulated-list-sort}).
@kindex @{
@findex tabulated-list-narrow-current-column
@item @{
Narrow the column at point
(@code{tabulated-list-narrow-current-column}).
@kindex @}
@findex tabulated-list-widen-current-column
@item @}
Widen the column at point
(@code{tabulated-list-widen-current-column}).
@end table

@menu
* List Filter::
@end menu

@node List Filter
@subsection Filtering Resource Lists

In all Kubernetes resource list buffers, you can use @kbd{/}
(@code{kubed-list-set-filter}) to @dfn{filter} the list of resources.
This command sets the filter of the current buffer, which specifies
conditions on resources (lines).  Resources that don't satisfy the
conditions are hidden, so you can focus on those that do.

Filters can be simple (@dfn{atomic filters}) or complex (@dfn{composed
filters}).  In the simple case, you enter a filter in the minibuffer
in the format @w{@samp{@var{op} @var{col} @var{val}}}, where @var{op}
is a comparison operator, either @samp{=} or @samp{~}, @var{col} is a
column name, and @var{val} is a value to compare to values of
@var{col} with @var{op}.

If @var{op} is @samp{=}, it says to keep only lines whose @code{col}
equals @var{val}.  If @var{op} is @samp{~}, it says to keep lines
whose @code{col} matches the @var{val} as a regular expression.  For
example, the filter @samp{= Name foobar} keeps only resources whose
name is @samp{foobar}.  To include whitespace in @var{val}, wrap
@var{val} in double quotes, like so: @samp{= Name "foo bar"}.

You can use more refined filters by composing simple filters.  To add
another filter that resources must satisfy, wrap your two filters in
parentheses and put them next to each other:

@lisp
(= Name foobar) (~ Namespace kube)
@end lisp

@noindent
This filter keeps only resources whose name is @samp{foobar} in
namespaces that include @samp{kube} as a substring, it expresses the
conjunction of the two simple filters.

To negate a simple filter, put a single quote ahead of it, like so:

@lisp
(= Name foobar) '(~ Namespace kube)
@end lisp

@noindent
This matches resources named @samp{foobar} in namespaces that do
@emph{not} contain @samp{kube}.

To specify a disjunction of simple filters (and negated simple
filters), add another level of nesting:

@lisp
((= Name spam) (= Name foobar)) '(~ Namespace kube)
@end lisp

@noindent
This filter matches resources named either @samp{spam} or
@samp{foobar}, in namespaces that do not contain @samp{kube}.

While entering a filter in the minibuffer, @kbd{@key{TAB}} completion
is available for column names and values.  To clear the filter, just
exit the minibuffer with an empty input.

@node Transient Menus
@section Transient Menus

@node Extending Kubed
@chapter Extending Kubed

Kubed has built-in support for many common types of Kubernetes
resources.  ``Support'' for a resource type in Kubed just means
providing common commands for working with resources of that type,
such as a command for showing the interactive list of these resources,
like @code{kubed-list-pods} for Kubernetes pods.  In Kubed, the macro
@code{kubed-define-resource} is used to define these common commands
and add support for more resource types:

@deffn Macro kubed-define-resource resource &optional properties &rest [ keyword argument ]@dots{} commands
Define commands for @var{resource}.
@end deffn

Say you want to add support for your Kubernetes service accounts.
With @code{kubed-define-resource}, all you need to do is to add the
following line to your Emacs initialization file:

@lisp
(kubed-define-resource serviceaccount)
@end lisp

This line defines the following commands for you:

@itemize
@item
@code{kubed-display-serviceaccount}
@item
@code{kubed-list-serviceaccounts}
@item
@code{kubed-edit-serviceaccount}
@item
@code{kubed-delete-serviceaccount}
@item
@code{kubed-create-serviceaccount}
@item
@code{kubed-update-serviceaccounts}
@item
@code{kubed-explain-serviceaccounts}
@end itemize

See the documentation string of @code{kubed-define-resource}
(@w{@kbd{C-h f}}) for details about the optional arguments of this
macro: the @var{properties} argument which lets you specify what Kubed
should show in the resource list buffer (for example,
@file{*kubed-serviceaccounts*}) and the @code{commands} argument which
lets you associate additional commands with your resource type.

@node Contributing
@chapter Contributing

We highly appreciate all contributions, including bug reports,
patches, improvement suggestions, and general feedback!

The best way to get in touch with the Kubed maintainers is via
@uref{https://lists.sr.ht/~eshel/kubed-devel, the Kubed mailing list}.

@deffn Command kubed-submit-bug-report
Report a bug in Kubed to the maintainers via mail.
@end deffn

You can use the command @kbd{M-x kubed-submit-bug-report} to easily
contact the Kubed maintainers from within Emacs.  This command opens a
new buffer with a message template ready to be sent to the development
mailing list.

@node Indices
@unnumbered Indices

@menu
* Function Index::
* Variable Index::
* Keystroke Index::
* Concept Index::
@end menu

@node Function Index
@unnumberedsec Function index

@printindex fn

@node Variable Index
@unnumberedsec Variable index

@printindex vr

@node Keystroke Index
@unnumberedsec Keystroke index

@printindex ky

@node Concept Index
@unnumberedsec Concept index

@printindex cp

@bye
